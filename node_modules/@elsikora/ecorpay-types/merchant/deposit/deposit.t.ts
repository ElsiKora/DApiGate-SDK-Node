import { IPaginationList } from "../../shared/shared.t";
import { EDepositType } from "../../user/payment/deposit/deposit.t";
import { IMerchantWay } from "../ways/ways.t";
export enum EDepositStatus {
	NEW = "new",
	WAITING = "waiting",
	EXPIRED = "expired",
	REJECTED = "rejected",
	PAID = "paid",
	CANCELED = "canceled",
	FAILED = "failed",
}

export interface ICreate {
  way: string;
  amount: number;
  internalID: string;
  customerID: string;
  description: string;
  ip: string;
};


export interface IResponseCreate {
  id: string;
  status: EDepositStatus;
  createdAt: Date;
  updatedAt: Date;
};


export interface IPaginationFilters extends IPaginationList {
  description: string;
  way: string;
  currency: string;
  status: EDepositStatus[];
  amountFrom: number;
  amountTo: number;
  dateFrom: string;
  dateTo: string;
};

export interface IFindById {
  id: string;
};

type OmittedIMerchantWay = Omit<IMerchantWay, "deposit" | "transfer" | "fee" | "limits">;

export interface IResponse {
  id: string;
  amount: number;
  way: OmittedIMerchantWay;
  merchant: {
    name: string;
  };
  description: string;
  status: EDepositStatus;
  type: EDepositType;
  internal: boolean;
  fee: {
    internal: number;
    depositRatio: number;
  };
  expiresIn: Date;
  createdAt: Date;
  updatedAt: Date;
};
