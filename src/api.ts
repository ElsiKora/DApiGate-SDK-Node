/**
 * DApiGate
 * DApiGate `Reaper API` documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios from "axios";

import { BASE_PATH, BaseAPI, operationServerMap } from "./base";
import { assertParamExists as assertParameterExists, createRequestFunction, DUMMY_BASE_URL, setSearchParams as setSearchParameters, toPathString } from "./common";

import type { RequestArguments } from "./base";
import type { Configuration } from "./configuration";
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore

// @ts-ignore

/**
 *
 * @export
 * @interface EmailGetResponseDTO
 */
export interface EmailGetResponseDTO {
	/**
	 * Email address
	 * @type {string}
	 * @memberof EmailGetResponseDTO
	 */
	email?: string;
	/**
	 * Email valid status
	 * @type {boolean}
	 * @memberof EmailGetResponseDTO
	 */
	isValid?: boolean;
}

/**
 *
 * @export
 * @interface InternalServerErrorResponseDTO
 */
export interface InternalServerErrorResponseDTO {
	/**
	 * Correlation identifier
	 * @type {string}
	 * @memberof InternalServerErrorResponseDTO
	 */
	correlationID?: string;
	/**
	 * Error name
	 * @type {string}
	 * @memberof InternalServerErrorResponseDTO
	 */
	error?: string;
	/**
	 * Error message
	 * @type {string}
	 * @memberof InternalServerErrorResponseDTO
	 */
	message?: string;
	/**
	 * Error status code
	 * @type {number}
	 * @memberof InternalServerErrorResponseDTO
	 */
	statusCode?: InternalServerErrorResponseDTOStatusCodeEnum;
	/**
	 * Error timestamp
	 * @type {number}
	 * @memberof InternalServerErrorResponseDTO
	 */
	timestamp?: number;
}

export const InternalServerErrorResponseDTOStatusCodeEnum = {
	NUMBER_100: 100,
	NUMBER_101: 101,
	NUMBER_102: 102,
	NUMBER_103: 103,
	NUMBER_200: 200,
	NUMBER_201: 201,
	NUMBER_202: 202,
	NUMBER_203: 203,
	NUMBER_204: 204,
	NUMBER_205: 205,
	NUMBER_206: 206,
	NUMBER_207: 207,
	NUMBER_208: 208,
	NUMBER_226: 226,
	NUMBER_300: 300,
	NUMBER_301: 301,
	NUMBER_302: 302,
	NUMBER_303: 303,
	NUMBER_304: 304,
	NUMBER_305: 305,
	NUMBER_306: 306,
	NUMBER_307: 307,
	NUMBER_308: 308,
	NUMBER_400: 400,
	NUMBER_401: 401,
	NUMBER_402: 402,
	NUMBER_403: 403,
	NUMBER_404: 404,
	NUMBER_405: 405,
	NUMBER_406: 406,
	NUMBER_407: 407,
	NUMBER_408: 408,
	NUMBER_409: 409,
	NUMBER_410: 410,
	NUMBER_411: 411,
	NUMBER_412: 412,
	NUMBER_413: 413,
	NUMBER_414: 414,
	NUMBER_415: 415,
	NUMBER_416: 416,
	NUMBER_417: 417,
	NUMBER_418: 418,
	NUMBER_421: 421,
	NUMBER_422: 422,
	NUMBER_423: 423,
	NUMBER_424: 424,
	NUMBER_425: 425,
	NUMBER_426: 426,
	NUMBER_428: 428,
	NUMBER_429: 429,
	NUMBER_431: 431,
	NUMBER_451: 451,
	NUMBER_500: 500,
	NUMBER_501: 501,
	NUMBER_502: 502,
	NUMBER_503: 503,
	NUMBER_504: 504,
	NUMBER_505: 505,
	NUMBER_506: 506,
	NUMBER_507: 507,
	NUMBER_508: 508,
	NUMBER_510: 510,
	NUMBER_511: 511,
} as const;

export type InternalServerErrorResponseDTOStatusCodeEnum = (typeof InternalServerErrorResponseDTOStatusCodeEnum)[keyof typeof InternalServerErrorResponseDTOStatusCodeEnum];

/**
 *
 * @export
 * @interface IpGetResponseDTO
 */
export interface IpGetResponseDTO {
	/**
	 * IP country code
	 * @type {string}
	 * @memberof IpGetResponseDTO
	 */
	country?: null | string;
	/**
	 * IP currency
	 * @type {string}
	 * @memberof IpGetResponseDTO
	 */
	currency?: null | string;
	/**
	 * IP address
	 * @type {string}
	 * @memberof IpGetResponseDTO
	 */
	ip?: string;
}

/**
 *
 * @export
 * @interface NotFoundResponseDTO
 */
export interface NotFoundResponseDTO {
	/**
	 * Correlation identifier
	 * @type {string}
	 * @memberof NotFoundResponseDTO
	 */
	correlationID?: string;
	/**
	 * Error name
	 * @type {string}
	 * @memberof NotFoundResponseDTO
	 */
	error?: string;
	/**
	 * Error message
	 * @type {string}
	 * @memberof NotFoundResponseDTO
	 */
	message?: string;
	/**
	 * Error status code
	 * @type {number}
	 * @memberof NotFoundResponseDTO
	 */
	statusCode?: NotFoundResponseDTOStatusCodeEnum;
	/**
	 * Error timestamp
	 * @type {number}
	 * @memberof NotFoundResponseDTO
	 */
	timestamp?: number;
}

export const NotFoundResponseDTOStatusCodeEnum = {
	NUMBER_100: 100,
	NUMBER_101: 101,
	NUMBER_102: 102,
	NUMBER_103: 103,
	NUMBER_200: 200,
	NUMBER_201: 201,
	NUMBER_202: 202,
	NUMBER_203: 203,
	NUMBER_204: 204,
	NUMBER_205: 205,
	NUMBER_206: 206,
	NUMBER_207: 207,
	NUMBER_208: 208,
	NUMBER_226: 226,
	NUMBER_300: 300,
	NUMBER_301: 301,
	NUMBER_302: 302,
	NUMBER_303: 303,
	NUMBER_304: 304,
	NUMBER_305: 305,
	NUMBER_306: 306,
	NUMBER_307: 307,
	NUMBER_308: 308,
	NUMBER_400: 400,
	NUMBER_401: 401,
	NUMBER_402: 402,
	NUMBER_403: 403,
	NUMBER_404: 404,
	NUMBER_405: 405,
	NUMBER_406: 406,
	NUMBER_407: 407,
	NUMBER_408: 408,
	NUMBER_409: 409,
	NUMBER_410: 410,
	NUMBER_411: 411,
	NUMBER_412: 412,
	NUMBER_413: 413,
	NUMBER_414: 414,
	NUMBER_415: 415,
	NUMBER_416: 416,
	NUMBER_417: 417,
	NUMBER_418: 418,
	NUMBER_421: 421,
	NUMBER_422: 422,
	NUMBER_423: 423,
	NUMBER_424: 424,
	NUMBER_425: 425,
	NUMBER_426: 426,
	NUMBER_428: 428,
	NUMBER_429: 429,
	NUMBER_431: 431,
	NUMBER_451: 451,
	NUMBER_500: 500,
	NUMBER_501: 501,
	NUMBER_502: 502,
	NUMBER_503: 503,
	NUMBER_504: 504,
	NUMBER_505: 505,
	NUMBER_506: 506,
	NUMBER_507: 507,
	NUMBER_508: 508,
	NUMBER_510: 510,
	NUMBER_511: 511,
} as const;

export type NotFoundResponseDTOStatusCodeEnum = (typeof NotFoundResponseDTOStatusCodeEnum)[keyof typeof NotFoundResponseDTOStatusCodeEnum];

/**
 *
 * @export
 * @interface PhoneGetResponseDTO
 */
export interface PhoneGetResponseDTO {
	/**
	 * Phone carrier
	 * @type {string}
	 * @memberof PhoneGetResponseDTO
	 */
	carrier?: null | string;
	/**
	 * Proxy code
	 * @type {string}
	 * @memberof PhoneGetResponseDTO
	 */
	country?: null | string;
	/**
	 * Phone valid status
	 * @type {boolean}
	 * @memberof PhoneGetResponseDTO
	 */
	isValid?: boolean;
	/**
	 * Phone wallet number
	 * @type {number}
	 * @memberof PhoneGetResponseDTO
	 */
	phone?: number;
}

/**
 *
 * @export
 * @interface ProxyGetListResponseDTO
 */
export interface ProxyGetListResponseDTO {
	/**
	 * ProxyGetResponseDTO Total number of items on page
	 * @type {number}
	 * @memberof ProxyGetListResponseDTO
	 */
	count?: number;
	/**
	 * ProxyGetResponseDTO Current page number
	 * @type {number}
	 * @memberof ProxyGetListResponseDTO
	 */
	currentPage?: number;
	/**
	 * Array of ProxyGetResponseDTO
	 * @type {Set<ProxyGetResponseDTO>}
	 * @memberof ProxyGetListResponseDTO
	 */
	items?: Set<ProxyGetResponseDTO>;
	/**
	 * ProxyGetResponseDTO Total number of items
	 * @type {number}
	 * @memberof ProxyGetListResponseDTO
	 */
	totalCount?: number;
	/**
	 * ProxyGetResponseDTO Total number of pages
	 * @type {number}
	 * @memberof ProxyGetListResponseDTO
	 */
	totalPages?: number;
}

/**
 *
 * @export
 * @interface ProxyGetResponseDTO
 */
export interface ProxyGetResponseDTO {
	/**
	 * Proxy code
	 * @type {string}
	 * @memberof ProxyGetResponseDTO
	 */
	country?: string;
	/**
	 * Proxy IP
	 * @type {string}
	 * @memberof ProxyGetResponseDTO
	 */
	ip?: string;
	/**
	 * Proxy password
	 * @type {string}
	 * @memberof ProxyGetResponseDTO
	 */
	password?: string;
	/**
	 * Proxy port
	 * @type {number}
	 * @memberof ProxyGetResponseDTO
	 */
	port?: number;
	/**
	 * Proxy login
	 * @type {string}
	 * @memberof ProxyGetResponseDTO
	 */
	username?: string;
}

/**
 *
 * @export
 * @interface RateGetResponseDTO
 */
export interface RateGetResponseDTO {
	/**
	 * Rate currency
	 * @type {string}
	 * @memberof RateGetResponseDTO
	 */
	currency?: string;
	/**
	 * Rate value
	 * @type {number}
	 * @memberof RateGetResponseDTO
	 */
	rate?: number;
}

/**
 *
 * @export
 * @interface RateGetSimpleListResponseDTO
 */
export interface RateGetSimpleListResponseDTO {
	/**
	 * Array of RateGetResponseDTO
	 * @type {Set<RateGetResponseDTO>}
	 * @memberof RateGetSimpleListResponseDTO
	 */
	items?: Set<RateGetResponseDTO>;
	/**
	 * RateGetResponseDTO Total number of items
	 * @type {number}
	 * @memberof RateGetSimpleListResponseDTO
	 */
	totalCount?: number;
}

/**
 *
 * @export
 * @interface UnauthorizedResponseDTO
 */
export interface UnauthorizedResponseDTO {
	/**
	 * Correlation identifier
	 * @type {string}
	 * @memberof UnauthorizedResponseDTO
	 */
	correlationID?: string;
	/**
	 * Error name
	 * @type {string}
	 * @memberof UnauthorizedResponseDTO
	 */
	error?: string;
	/**
	 * Error message
	 * @type {string}
	 * @memberof UnauthorizedResponseDTO
	 */
	message?: string;
	/**
	 * Error status code
	 * @type {number}
	 * @memberof UnauthorizedResponseDTO
	 */
	statusCode?: UnauthorizedResponseDTOStatusCodeEnum;
	/**
	 * Error timestamp
	 * @type {number}
	 * @memberof UnauthorizedResponseDTO
	 */
	timestamp?: number;
}

export const UnauthorizedResponseDTOStatusCodeEnum = {
	NUMBER_100: 100,
	NUMBER_101: 101,
	NUMBER_102: 102,
	NUMBER_103: 103,
	NUMBER_200: 200,
	NUMBER_201: 201,
	NUMBER_202: 202,
	NUMBER_203: 203,
	NUMBER_204: 204,
	NUMBER_205: 205,
	NUMBER_206: 206,
	NUMBER_207: 207,
	NUMBER_208: 208,
	NUMBER_226: 226,
	NUMBER_300: 300,
	NUMBER_301: 301,
	NUMBER_302: 302,
	NUMBER_303: 303,
	NUMBER_304: 304,
	NUMBER_305: 305,
	NUMBER_306: 306,
	NUMBER_307: 307,
	NUMBER_308: 308,
	NUMBER_400: 400,
	NUMBER_401: 401,
	NUMBER_402: 402,
	NUMBER_403: 403,
	NUMBER_404: 404,
	NUMBER_405: 405,
	NUMBER_406: 406,
	NUMBER_407: 407,
	NUMBER_408: 408,
	NUMBER_409: 409,
	NUMBER_410: 410,
	NUMBER_411: 411,
	NUMBER_412: 412,
	NUMBER_413: 413,
	NUMBER_414: 414,
	NUMBER_415: 415,
	NUMBER_416: 416,
	NUMBER_417: 417,
	NUMBER_418: 418,
	NUMBER_421: 421,
	NUMBER_422: 422,
	NUMBER_423: 423,
	NUMBER_424: 424,
	NUMBER_425: 425,
	NUMBER_426: 426,
	NUMBER_428: 428,
	NUMBER_429: 429,
	NUMBER_431: 431,
	NUMBER_451: 451,
	NUMBER_500: 500,
	NUMBER_501: 501,
	NUMBER_502: 502,
	NUMBER_503: 503,
	NUMBER_504: 504,
	NUMBER_505: 505,
	NUMBER_506: 506,
	NUMBER_507: 507,
	NUMBER_508: 508,
	NUMBER_510: 510,
	NUMBER_511: 511,
} as const;

export type UnauthorizedResponseDTOStatusCodeEnum = (typeof UnauthorizedResponseDTOStatusCodeEnum)[keyof typeof UnauthorizedResponseDTOStatusCodeEnum];

/**
 * EmailApi - axios parameter creator
 * @export
 */
export const EmailApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * This method is used for fetching `Email`
		 * @summary Fetching `Email`
		 * @param {string} email Email address
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		emailControllerGet: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArguments> => {
			// verify required parameter 'email' is not null or undefined
			assertParameterExists("emailControllerGet", "email", email);
			const localVariablePath = `/v1/email`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVariableUrlObject = new URL(localVariablePath, DUMMY_BASE_URL);
			let baseOptions;

			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVariableRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVariableHeaderParameter = {} as any;
			const localVariableQueryParameter = {} as any;

			if (email !== undefined) {
				localVariableQueryParameter["email"] = email;
			}

			setSearchParameters(localVariableUrlObject, localVariableQueryParameter);
			const headersFromBaseOptions = baseOptions?.headers ? baseOptions.headers : {};
			localVariableRequestOptions.headers = { ...localVariableHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				options: localVariableRequestOptions,
				url: toPathString(localVariableUrlObject),
			};
		},
	};
};

/**
 * EmailApi - functional programming interface
 * @export
 */
export const EmailApiFp = function (configuration?: Configuration) {
	const localVariableAxiosParameterCreator = EmailApiAxiosParamCreator(configuration);

	return {
		/**
		 * This method is used for fetching `Email`
		 * @summary Fetching `Email`
		 * @param {string} email Email address
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async emailControllerGet(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailGetResponseDTO>> {
			const localVariableAxiosArguments = await localVariableAxiosParameterCreator.emailControllerGet(email, options);
			const localVariableOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVariableOperationServerBasePath = operationServerMap["EmailApi.emailControllerGet"]?.[localVariableOperationServerIndex]?.url;

			return (axios, basePath) => createRequestFunction(localVariableAxiosArguments, globalAxios, BASE_PATH, configuration)(axios, localVariableOperationServerBasePath || basePath);
		},
	};
};

/**
 * EmailApi - factory interface
 * @export
 */
export const EmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVariableFp = EmailApiFp(configuration);

	return {
		/**
		 * This method is used for fetching `Email`
		 * @summary Fetching `Email`
		 * @param {string} email Email address
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		emailControllerGet(email: string, options?: any): AxiosPromise<EmailGetResponseDTO> {
			return localVariableFp.emailControllerGet(email, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export class EmailApi extends BaseAPI {
	/**
	 * This method is used for fetching `Email`
	 * @summary Fetching `Email`
	 * @param {string} email Email address
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EmailApi
	 */
	public emailControllerGet(email: string, options?: RawAxiosRequestConfig) {
		return EmailApiFp(this.configuration)
			.emailControllerGet(email, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * IPApi - axios parameter creator
 * @export
 */
export const IPApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * This method is used for fetching `IP`
		 * @summary Fetching `IP`
		 * @param {string} ip IP address
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		ipControllerGet: async (ip: string, options: RawAxiosRequestConfig = {}): Promise<RequestArguments> => {
			// verify required parameter 'ip' is not null or undefined
			assertParameterExists("ipControllerGet", "ip", ip);
			const localVariablePath = `/v1/ip`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVariableUrlObject = new URL(localVariablePath, DUMMY_BASE_URL);
			let baseOptions;

			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVariableRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVariableHeaderParameter = {} as any;
			const localVariableQueryParameter = {} as any;

			if (ip !== undefined) {
				localVariableQueryParameter["ip"] = ip;
			}

			setSearchParameters(localVariableUrlObject, localVariableQueryParameter);
			const headersFromBaseOptions = baseOptions?.headers ? baseOptions.headers : {};
			localVariableRequestOptions.headers = { ...localVariableHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				options: localVariableRequestOptions,
				url: toPathString(localVariableUrlObject),
			};
		},
	};
};

/**
 * IPApi - functional programming interface
 * @export
 */
export const IPApiFp = function (configuration?: Configuration) {
	const localVariableAxiosParameterCreator = IPApiAxiosParamCreator(configuration);

	return {
		/**
		 * This method is used for fetching `IP`
		 * @summary Fetching `IP`
		 * @param {string} ip IP address
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async ipControllerGet(ip: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpGetResponseDTO>> {
			const localVariableAxiosArguments = await localVariableAxiosParameterCreator.ipControllerGet(ip, options);
			const localVariableOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVariableOperationServerBasePath = operationServerMap["IPApi.ipControllerGet"]?.[localVariableOperationServerIndex]?.url;

			return (axios, basePath) => createRequestFunction(localVariableAxiosArguments, globalAxios, BASE_PATH, configuration)(axios, localVariableOperationServerBasePath || basePath);
		},
	};
};

/**
 * IPApi - factory interface
 * @export
 */
export const IPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVariableFp = IPApiFp(configuration);

	return {
		/**
		 * This method is used for fetching `IP`
		 * @summary Fetching `IP`
		 * @param {string} ip IP address
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		ipControllerGet(ip: string, options?: any): AxiosPromise<IpGetResponseDTO> {
			return localVariableFp.ipControllerGet(ip, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * IPApi - object-oriented interface
 * @export
 * @class IPApi
 * @extends {BaseAPI}
 */
export class IPApi extends BaseAPI {
	/**
	 * This method is used for fetching `IP`
	 * @summary Fetching `IP`
	 * @param {string} ip IP address
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof IPApi
	 */
	public ipControllerGet(ip: string, options?: RawAxiosRequestConfig) {
		return IPApiFp(this.configuration)
			.ipControllerGet(ip, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * PhoneApi - axios parameter creator
 * @export
 */
export const PhoneApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * This method is used for fetching `Phone`
		 * @summary Fetching `Phone`
		 * @param {number} phone Phone wallet number
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		phoneControllerGet: async (phone: number, options: RawAxiosRequestConfig = {}): Promise<RequestArguments> => {
			// verify required parameter 'phone' is not null or undefined
			assertParameterExists("phoneControllerGet", "phone", phone);
			const localVariablePath = `/v1/phone`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVariableUrlObject = new URL(localVariablePath, DUMMY_BASE_URL);
			let baseOptions;

			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVariableRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVariableHeaderParameter = {} as any;
			const localVariableQueryParameter = {} as any;

			if (phone !== undefined) {
				localVariableQueryParameter["phone"] = phone;
			}

			setSearchParameters(localVariableUrlObject, localVariableQueryParameter);
			const headersFromBaseOptions = baseOptions?.headers ? baseOptions.headers : {};
			localVariableRequestOptions.headers = { ...localVariableHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				options: localVariableRequestOptions,
				url: toPathString(localVariableUrlObject),
			};
		},
	};
};

/**
 * PhoneApi - functional programming interface
 * @export
 */
export const PhoneApiFp = function (configuration?: Configuration) {
	const localVariableAxiosParameterCreator = PhoneApiAxiosParamCreator(configuration);

	return {
		/**
		 * This method is used for fetching `Phone`
		 * @summary Fetching `Phone`
		 * @param {number} phone Phone wallet number
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async phoneControllerGet(phone: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneGetResponseDTO>> {
			const localVariableAxiosArguments = await localVariableAxiosParameterCreator.phoneControllerGet(phone, options);
			const localVariableOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVariableOperationServerBasePath = operationServerMap["PhoneApi.phoneControllerGet"]?.[localVariableOperationServerIndex]?.url;

			return (axios, basePath) => createRequestFunction(localVariableAxiosArguments, globalAxios, BASE_PATH, configuration)(axios, localVariableOperationServerBasePath || basePath);
		},
	};
};

/**
 * PhoneApi - factory interface
 * @export
 */
export const PhoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVariableFp = PhoneApiFp(configuration);

	return {
		/**
		 * This method is used for fetching `Phone`
		 * @summary Fetching `Phone`
		 * @param {number} phone Phone wallet number
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		phoneControllerGet(phone: number, options?: any): AxiosPromise<PhoneGetResponseDTO> {
			return localVariableFp.phoneControllerGet(phone, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * PhoneApi - object-oriented interface
 * @export
 * @class PhoneApi
 * @extends {BaseAPI}
 */
export class PhoneApi extends BaseAPI {
	/**
	 * This method is used for fetching `Phone`
	 * @summary Fetching `Phone`
	 * @param {number} phone Phone wallet number
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PhoneApi
	 */
	public phoneControllerGet(phone: number, options?: RawAxiosRequestConfig) {
		return PhoneApiFp(this.configuration)
			.phoneControllerGet(phone, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * ProxyApi - axios parameter creator
 * @export
 */
export const ProxyApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * This method is used for fetching list of `Proxys`
		 * @summary Fetching list of `Proxys`
		 * @param {number} limit ProxyGetResponseDTO Items per page
		 * @param {number} page ProxyGetResponseDTO Page to return
		 * @param {string} [country] Proxy code
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		proxyControllerGetList: async (limit: number, page: number, country?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArguments> => {
			// verify required parameter 'limit' is not null or undefined
			assertParameterExists("proxyControllerGetList", "limit", limit);
			// verify required parameter 'page' is not null or undefined
			assertParameterExists("proxyControllerGetList", "page", page);
			const localVariablePath = `/v1/proxy`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVariableUrlObject = new URL(localVariablePath, DUMMY_BASE_URL);
			let baseOptions;

			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVariableRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVariableHeaderParameter = {} as any;
			const localVariableQueryParameter = {} as any;

			if (limit !== undefined) {
				localVariableQueryParameter["limit"] = limit;
			}

			if (page !== undefined) {
				localVariableQueryParameter["page"] = page;
			}

			if (country !== undefined) {
				localVariableQueryParameter["country"] = country;
			}

			setSearchParameters(localVariableUrlObject, localVariableQueryParameter);
			const headersFromBaseOptions = baseOptions?.headers ? baseOptions.headers : {};
			localVariableRequestOptions.headers = { ...localVariableHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				options: localVariableRequestOptions,
				url: toPathString(localVariableUrlObject),
			};
		},
	};
};

/**
 * ProxyApi - functional programming interface
 * @export
 */
export const ProxyApiFp = function (configuration?: Configuration) {
	const localVariableAxiosParameterCreator = ProxyApiAxiosParamCreator(configuration);

	return {
		/**
		 * This method is used for fetching list of `Proxys`
		 * @summary Fetching list of `Proxys`
		 * @param {number} limit ProxyGetResponseDTO Items per page
		 * @param {number} page ProxyGetResponseDTO Page to return
		 * @param {string} [country] Proxy code
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async proxyControllerGetList(limit: number, page: number, country?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProxyGetListResponseDTO>> {
			const localVariableAxiosArguments = await localVariableAxiosParameterCreator.proxyControllerGetList(limit, page, country, options);
			const localVariableOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVariableOperationServerBasePath = operationServerMap["ProxyApi.proxyControllerGetList"]?.[localVariableOperationServerIndex]?.url;

			return (axios, basePath) => createRequestFunction(localVariableAxiosArguments, globalAxios, BASE_PATH, configuration)(axios, localVariableOperationServerBasePath || basePath);
		},
	};
};

/**
 * ProxyApi - factory interface
 * @export
 */
export const ProxyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVariableFp = ProxyApiFp(configuration);

	return {
		/**
		 * This method is used for fetching list of `Proxys`
		 * @summary Fetching list of `Proxys`
		 * @param {number} limit ProxyGetResponseDTO Items per page
		 * @param {number} page ProxyGetResponseDTO Page to return
		 * @param {string} [country] Proxy code
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		proxyControllerGetList(limit: number, page: number, country?: string, options?: any): AxiosPromise<ProxyGetListResponseDTO> {
			return localVariableFp.proxyControllerGetList(limit, page, country, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * ProxyApi - object-oriented interface
 * @export
 * @class ProxyApi
 * @extends {BaseAPI}
 */
export class ProxyApi extends BaseAPI {
	/**
	 * This method is used for fetching list of `Proxys`
	 * @summary Fetching list of `Proxys`
	 * @param {number} limit ProxyGetResponseDTO Items per page
	 * @param {number} page ProxyGetResponseDTO Page to return
	 * @param {string} [country] Proxy code
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProxyApi
	 */
	public proxyControllerGetList(limit: number, page: number, country?: string, options?: RawAxiosRequestConfig) {
		return ProxyApiFp(this.configuration)
			.proxyControllerGetList(limit, page, country, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * RateApi - axios parameter creator
 * @export
 */
export const RateApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * This method is used for fetching simple list of `Rates`
		 * @summary Fetching simple list of `Rates`
		 * @param {string} base Rate code
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		rateControllerGetSimpleList: async (base: string, options: RawAxiosRequestConfig = {}): Promise<RequestArguments> => {
			// verify required parameter 'base' is not null or undefined
			assertParameterExists("rateControllerGetSimpleList", "base", base);
			const localVariablePath = `/v1/rate`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVariableUrlObject = new URL(localVariablePath, DUMMY_BASE_URL);
			let baseOptions;

			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVariableRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVariableHeaderParameter = {} as any;
			const localVariableQueryParameter = {} as any;

			if (base !== undefined) {
				localVariableQueryParameter["base"] = base;
			}

			setSearchParameters(localVariableUrlObject, localVariableQueryParameter);
			const headersFromBaseOptions = baseOptions?.headers ? baseOptions.headers : {};
			localVariableRequestOptions.headers = { ...localVariableHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				options: localVariableRequestOptions,
				url: toPathString(localVariableUrlObject),
			};
		},
	};
};

/**
 * RateApi - functional programming interface
 * @export
 */
export const RateApiFp = function (configuration?: Configuration) {
	const localVariableAxiosParameterCreator = RateApiAxiosParamCreator(configuration);

	return {
		/**
		 * This method is used for fetching simple list of `Rates`
		 * @summary Fetching simple list of `Rates`
		 * @param {string} base Rate code
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async rateControllerGetSimpleList(base: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RateGetSimpleListResponseDTO>> {
			const localVariableAxiosArguments = await localVariableAxiosParameterCreator.rateControllerGetSimpleList(base, options);
			const localVariableOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVariableOperationServerBasePath = operationServerMap["RateApi.rateControllerGetSimpleList"]?.[localVariableOperationServerIndex]?.url;

			return (axios, basePath) => createRequestFunction(localVariableAxiosArguments, globalAxios, BASE_PATH, configuration)(axios, localVariableOperationServerBasePath || basePath);
		},
	};
};

/**
 * RateApi - factory interface
 * @export
 */
export const RateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVariableFp = RateApiFp(configuration);

	return {
		/**
		 * This method is used for fetching simple list of `Rates`
		 * @summary Fetching simple list of `Rates`
		 * @param {string} base Rate code
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		rateControllerGetSimpleList(base: string, options?: any): AxiosPromise<RateGetSimpleListResponseDTO> {
			return localVariableFp.rateControllerGetSimpleList(base, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * RateApi - object-oriented interface
 * @export
 * @class RateApi
 * @extends {BaseAPI}
 */
export class RateApi extends BaseAPI {
	/**
	 * This method is used for fetching simple list of `Rates`
	 * @summary Fetching simple list of `Rates`
	 * @param {string} base Rate code
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RateApi
	 */
	public rateControllerGetSimpleList(base: string, options?: RawAxiosRequestConfig) {
		return RateApiFp(this.configuration)
			.rateControllerGetSimpleList(base, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
