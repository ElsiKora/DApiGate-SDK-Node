/**
 * DApiGate
 * DApiGate `Reaper API` documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequiredError } from "./base";

import type { RequestArguments } from "./base";
import type { Configuration } from "./configuration";

import type { AxiosInstance, AxiosResponse } from "axios";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = "https://example.com";

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, parameterName: string, parameterValue: unknown) {
	if (parameterValue === null || parameterValue === undefined) {
		throw new RequiredError(parameterName, `Required parameter ${parameterName} was null or undefined when calling ${functionName}.`);
	}
};

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParameterName: string, configuration?: Configuration) {
	if (configuration && configuration.apiKey) {
		const localVariableApiKeyValue = typeof configuration.apiKey === "function" ? await configuration.apiKey(keyParameterName) : await configuration.apiKey;
		object[keyParameterName] = localVariableApiKeyValue;
	}
};

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
	if (configuration && (configuration.username || configuration.password)) {
		object["auth"] = { password: configuration.password, username: configuration.username };
	}
};

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
	if (configuration && configuration.accessToken) {
		const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
		object["Authorization"] = "Bearer " + accessToken;
	}
};

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: Array<string>, configuration?: Configuration) {
	if (configuration && configuration.accessToken) {
		const localVariableAccessTokenValue = typeof configuration.accessToken === "function" ? await configuration.accessToken(name, scopes) : await configuration.accessToken;
		object["Authorization"] = "Bearer " + localVariableAccessTokenValue;
	}
};

function setFlattenedQueryParameters(urlSearchParameters: URLSearchParams, parameter: any, key: string = ""): void {
	if (parameter == undefined) return;

	if (typeof parameter === "object") {
		if (Array.isArray(parameter)) {
			for (const item of parameter) setFlattenedQueryParameters(urlSearchParameters, item, key);
		} else {
			for (const currentKey of Object.keys(parameter)) setFlattenedQueryParameters(urlSearchParameters, parameter[currentKey], `${key}${key === "" ? "" : "."}${currentKey}`);
		}
	} else {
		if (urlSearchParameters.has(key)) {
			urlSearchParameters.append(key, parameter);
		} else {
			urlSearchParameters.set(key, parameter);
		}
	}
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: Array<any>) {
	const searchParameters = new URLSearchParams(url.search);
	setFlattenedQueryParameters(searchParameters, objects);
	url.search = searchParameters.toString();
};

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
	const nonString = typeof value !== "string";
	const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;

	return needsSerialization ? JSON.stringify(value === undefined ? {} : value) : value || "";
};

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
	return url.pathname + url.search + url.hash;
};

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArguments: RequestArguments, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
	return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
		const axiosRequestArguments = {
			...axiosArguments.options,
			url: (axios.defaults.baseURL ? "" : configuration?.basePath ?? basePath) + axiosArguments.url,
		};

		return axios.request<T, R>(axiosRequestArguments);
	};
};
